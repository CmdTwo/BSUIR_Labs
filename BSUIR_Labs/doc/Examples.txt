/////////
+++Polyno Example
/////////

	Polyno* polyno_1 = new Polyno();

	polyno_1->PushBack(7, 4);
	polyno_1->PushBack(4, 2);
	polyno_1->PushBack(-1, 1);
	polyno_1->PushBack(2, 0);

	std::cout << (*polyno_1);

	Polyno* polyno_2 = new Polyno();

	polyno_2->PushBack(7, 4);
	polyno_2->PushBack(4, 2);
	polyno_2->PushBack(-1, 1);
	polyno_2->PushBack(2, 0);

	std::cout << (*polyno_2);

	std::cout << "\nIs equal: " << (polyno_1->IsEqual(*polyno_2) ? "True" : "False") << "\n";

	Polyno* polyno_3 = new Polyno();

	polyno_1->Add(*polyno_2, polyno_3);

	std::cout << (*polyno_3);

	polyno_2->Inverse();

	Polyno* polyno_4 = new Polyno();

	polyno_3->Add(*polyno_2, polyno_4);

	std::cout << (*polyno_4);

/////////
+++Counting Example
/////////

void Testing(const int &usersCount = 64, const int &every = 4)
{
	Counting* couting;

	std::cout << "Users: 1-" << usersCount << " | Remove every: " << every << "\n";

	for (int i = 0; i < usersCount; i++)
	{
		couting = new Counting();

		for (int j = 0; j != i + 1; j++)
			couting->PushBack("User_" + std::to_string(j + 1));

		couting->RemoveEvery(every);

		std::cout << "U: ";
		std::cout.width(2);
		std::cout << i + 1 << " | R: ";
		std::cout.width(2); 
		std::cout << couting->GetFirst()->_permanentIndex << "\n";

		delete couting;
	}
}

					/main/

	Testing();
	/*Counting* couting = new Counting();

	for (int i = 0; i != 64; i++)
	{
		couting->PushBack("User_" + std::to_string(i));
	}

	std::cout << "Users list:\n\n" << *couting;

	couting->RemoveEvery(4);

	std::cout << "\nReslut:\n" << *couting;*/
	   	 
/////////
+++SingleList Example
/////////

struct Sub
{
	std::string _name;
	std::string _surName;
	std::string _phone;

	static bool STakeByName(const Sub &value, const std::string &surName)
	{
		return value._surName == surName;
	}

	static bool STakeByPhone(const Sub &value, const std::string &phone)
	{
		return value._phone == phone;
	}
	
	static bool CompareBySurname(const Sub &first, const Sub &second)
	{
		return first._surName[0] > second._surName[0];
	}

	static bool CompareByPhone(const Sub &first, const Sub &second) 
	{
		int firstNumber = std::atoi(first._phone.substr(6, first._phone.length()).c_str());
		int secondNumber = std::atoi(second._phone.substr(6, second._phone.length()).c_str());
		return firstNumber > secondNumber;
	}

};

					/main/

	SingleList<Sub> single = SingleList<Sub>();
	single.PushBack(Sub {	"Alexey",	"Bern",		"+375296385341" });
	single.PushBack(Sub {	"Egor",		"Kirich",	"+375175351513" });
	single.PushBack(Sub	{	"Lera",		"Bubble",	"+375295321251" });
	single.PushBack(Sub	{	"Adolf",	"Hitler",	"+375179358185" });
	single.PushBack(Sub	{	"Zack",		"Fallout",	"+375179358185" });

	for (SingleList<Sub>::const_iterator iter = single.Begin(); iter != single.End(); iter = iter->_next)
		std::cout << iter->_value._name.c_str() << "\t" << iter->_value._phone.c_str() << "\n";

	#pragma region Sort

	single.SortBy(Sub::CompareBySurname);
	std::cout << "\nAfter sort:\n\n";

	for (SingleList<Sub>::const_iterator iter = single.Begin(); iter != single.End(); iter = iter->_next)
		std::cout << iter->_value._name.c_str() << "\t" << iter->_value._phone.c_str() << "\n";

	#pragma endregion

	std::cout << "\n";

	#pragma region TakeBy

	SingleList<Sub>* result = new SingleList<Sub>();		
	single.TakeBy<std::string>(result, "+375179358185", Sub::STakeByPhone);

	std::cout << "Take result:\n\n";

	for (SingleList<Sub>::const_iterator iter = result->Begin(); iter != result->End(); iter = iter->_next)
		std::cout << iter->_value._name.c_str() << "\t" << iter->_value._phone.c_str() << "\n";

	#pragma endregion
